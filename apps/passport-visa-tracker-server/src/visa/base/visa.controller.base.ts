/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VisaService } from "../visa.service";
import { VisaCreateInput } from "./VisaCreateInput";
import { Visa } from "./Visa";
import { VisaFindManyArgs } from "./VisaFindManyArgs";
import { VisaWhereUniqueInput } from "./VisaWhereUniqueInput";
import { VisaUpdateInput } from "./VisaUpdateInput";

export class VisaControllerBase {
  constructor(protected readonly service: VisaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Visa })
  async createVisa(@common.Body() data: VisaCreateInput): Promise<Visa> {
    return await this.service.createVisa({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Visa] })
  @ApiNestedQuery(VisaFindManyArgs)
  async visas(@common.Req() request: Request): Promise<Visa[]> {
    const args = plainToClass(VisaFindManyArgs, request.query);
    return this.service.visas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Visa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async visa(
    @common.Param() params: VisaWhereUniqueInput
  ): Promise<Visa | null> {
    const result = await this.service.visa({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Visa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVisa(
    @common.Param() params: VisaWhereUniqueInput,
    @common.Body() data: VisaUpdateInput
  ): Promise<Visa | null> {
    try {
      return await this.service.updateVisa({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Visa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVisa(
    @common.Param() params: VisaWhereUniqueInput
  ): Promise<Visa | null> {
    try {
      return await this.service.deleteVisa({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
