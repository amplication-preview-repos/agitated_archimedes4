/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Passport as PrismaPassport } from "@prisma/client";

export class PassportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PassportCountArgs, "select">): Promise<number> {
    return this.prisma.passport.count(args);
  }

  async passports(
    args: Prisma.PassportFindManyArgs
  ): Promise<PrismaPassport[]> {
    return this.prisma.passport.findMany(args);
  }
  async passport(
    args: Prisma.PassportFindUniqueArgs
  ): Promise<PrismaPassport | null> {
    return this.prisma.passport.findUnique(args);
  }
  async createPassport(
    args: Prisma.PassportCreateArgs
  ): Promise<PrismaPassport> {
    return this.prisma.passport.create(args);
  }
  async updatePassport(
    args: Prisma.PassportUpdateArgs
  ): Promise<PrismaPassport> {
    return this.prisma.passport.update(args);
  }
  async deletePassport(
    args: Prisma.PassportDeleteArgs
  ): Promise<PrismaPassport> {
    return this.prisma.passport.delete(args);
  }
}
