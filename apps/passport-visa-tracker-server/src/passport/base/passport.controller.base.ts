/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PassportService } from "../passport.service";
import { PassportCreateInput } from "./PassportCreateInput";
import { Passport } from "./Passport";
import { PassportFindManyArgs } from "./PassportFindManyArgs";
import { PassportWhereUniqueInput } from "./PassportWhereUniqueInput";
import { PassportUpdateInput } from "./PassportUpdateInput";

export class PassportControllerBase {
  constructor(protected readonly service: PassportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Passport })
  async createPassport(
    @common.Body() data: PassportCreateInput
  ): Promise<Passport> {
    return await this.service.createPassport({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Passport] })
  @ApiNestedQuery(PassportFindManyArgs)
  async passports(@common.Req() request: Request): Promise<Passport[]> {
    const args = plainToClass(PassportFindManyArgs, request.query);
    return this.service.passports({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Passport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async passport(
    @common.Param() params: PassportWhereUniqueInput
  ): Promise<Passport | null> {
    const result = await this.service.passport({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Passport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePassport(
    @common.Param() params: PassportWhereUniqueInput,
    @common.Body() data: PassportUpdateInput
  ): Promise<Passport | null> {
    try {
      return await this.service.updatePassport({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Passport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePassport(
    @common.Param() params: PassportWhereUniqueInput
  ): Promise<Passport | null> {
    try {
      return await this.service.deletePassport({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
